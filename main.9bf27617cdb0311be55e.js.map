{"version":3,"sources":["webpack:///./promise1.js","webpack:///./promise2.js","webpack:///./promise3.js","webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACPD,EAAQF,KACTA,OAGLI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,QACvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GACFL,QAAM,MCXfU,G,8BAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,KAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GAIjBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAK7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAI7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GACpBQ,UCjBTO,EAAkB,SAAAC,GACpB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GACzB,IAN2BC,EAAKC,EAM1BxB,GANqBuB,EAMa,IANRC,EAMa,IAL1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOhDnB,YAAW,WACYqB,KAAKE,SAAW,GAE/BxB,EAAQ,CAACkB,EAAYO,GAAI5B,IAEzBsB,EAAOD,EAAYO,MAExB5B,OAGL6B,EAAa,SAAAD,GACfrB,QAAQC,IAAR,eAA2BoB,EAAG,GAA9B,iBAAiDA,EAAG,GAApD,QAGEE,EAAW,SAAAF,GACbrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAIJR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAE/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GACjDV,QAAgB,IC/B/Bb,QAAQC,IAAI,cAEZJ,YAAW,WACPG,QAAQC,IAAI,gBACb,KAEHN,QAAQC,UAAUM,KAAKI,GAAiBJ,KAAKW,GAAiBX,KAAKT,K","file":"main.9bf27617cdb0311be55e.js","sourcesContent":["const delay = ms => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms);\r\n    });\r\n};\r\nconst logger = time => console.log(`Resolved after ${time} ms`);\r\ndelay(2000).then(logger);\r\ndelay(1000).then(logger);\r\ndelay(1500).then(logger);\r\nexport default delay(1500);\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\nexport default toggleUserState();\r\n","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n            if (canProcess) {\r\n                resolve([transaction.id, delay]);\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n        }, delay);\r\n    });\r\n};\r\nconst logSuccess = id => {\r\n    console.log(`Transaction ${id[0]} processed in ${id[1]} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/* Должно работать так */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\nexport default makeTransaction({});\r\n","import delay from './promise1';\r\nimport toggleUserState from './promise2';\r\nimport makeTransaction from './promise3';\r\nconsole.log(' start ...');\r\n\r\nsetTimeout(function () {\r\n    console.log('setTimeout');\r\n}, 2000);\r\n\r\nPromise.resolve().then(toggleUserState).then(makeTransaction).then(delay);\r\n"],"sourceRoot":""}